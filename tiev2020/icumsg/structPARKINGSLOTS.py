"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from icumsg.Slot import Slot as icumsg_Slot

class structPARKINGSLOTS(object):
    __slots__ = ["num", "timestamp", "parking_slots"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.num = 0
        self.timestamp = 0
        self.parking_slots = []

    def encode(self):
        buf = BytesIO()
        buf.write(structPARKINGSLOTS._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.num, self.timestamp))
        for i0 in range(self.num):
            assert self.parking_slots[i0]._get_packed_fingerprint() == icumsg_Slot._get_packed_fingerprint()
            self.parking_slots[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != structPARKINGSLOTS._get_packed_fingerprint():
            raise ValueError("Decode error")
        return structPARKINGSLOTS._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = structPARKINGSLOTS()
        self.num, self.timestamp = struct.unpack(">ii", buf.read(8))
        self.parking_slots = []
        for i0 in range(self.num):
            self.parking_slots.append(icumsg_Slot._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if structPARKINGSLOTS in parents: return 0
        newparents = parents + [structPARKINGSLOTS]
        tmphash = (0xe3581b301de05f34+ icumsg_Slot._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if structPARKINGSLOTS._packed_fingerprint is None:
            structPARKINGSLOTS._packed_fingerprint = struct.pack(">Q", structPARKINGSLOTS._get_hash_recursive([]))
        return structPARKINGSLOTS._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

