"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import icumsg_lcm.LinePoint

import icumsg_lcm.LaneLine

class LANE(object):
    __slots__ = ["lane_type", "width", "stop_point", "left_line", "right_line"]

    __typenames__ = ["int32_t", "float", "icumsg_lcm.LinePoint", "icumsg_lcm.LaneLine", "icumsg_lcm.LaneLine"]

    __dimensions__ = [None, None, None, None, None]

    TYPE_NONE = 0x00
    TYPE_STRAIGHT = 0x01
    TYPE_LEFT = 0x02
    TYPE_RIGHT = 0x04
    TYPE_UTURN = 0x08
    TYPE_STRAIGHT_LEFT = 0x03
    TYPE_STRAIGHT_RIGHT = 0x05
    TYPE_STRAIGHT_LEFT_RIGHT = 0x07

    def __init__(self):
        self.lane_type = 0
        self.width = 0.0
        self.stop_point = icumsg_lcm.LinePoint()
        self.left_line = icumsg_lcm.LaneLine()
        self.right_line = icumsg_lcm.LaneLine()

    def encode(self):
        buf = BytesIO()
        buf.write(LANE._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">if", self.lane_type, self.width))
        assert self.stop_point._get_packed_fingerprint() == icumsg_lcm.LinePoint._get_packed_fingerprint()
        self.stop_point._encode_one(buf)
        assert self.left_line._get_packed_fingerprint() == icumsg_lcm.LaneLine._get_packed_fingerprint()
        self.left_line._encode_one(buf)
        assert self.right_line._get_packed_fingerprint() == icumsg_lcm.LaneLine._get_packed_fingerprint()
        self.right_line._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LANE._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LANE._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LANE()
        self.lane_type, self.width = struct.unpack(">if", buf.read(8))
        self.stop_point = icumsg_lcm.LinePoint._decode_one(buf)
        self.left_line = icumsg_lcm.LaneLine._decode_one(buf)
        self.right_line = icumsg_lcm.LaneLine._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LANE in parents: return 0
        newparents = parents + [LANE]
        tmphash = (0x64f90884723f9b46+ icumsg_lcm.LinePoint._get_hash_recursive(newparents)+ icumsg_lcm.LaneLine._get_hash_recursive(newparents)+ icumsg_lcm.LaneLine._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LANE._packed_fingerprint is None:
            LANE._packed_fingerprint = struct.pack(">Q", LANE._get_hash_recursive([]))
        return LANE._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

