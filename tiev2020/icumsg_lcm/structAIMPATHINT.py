"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class structAIMPATHINT(object):
    __slots__ = ["timestamp", "mode", "x", "y", "num_point", "map_speed", "steer"]

    __typenames__ = ["int64_t", "byte", "double", "double", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, [256], [256], None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.mode = 0
        self.x = [ 0.0 for dim0 in range(256) ]
        self.y = [ 0.0 for dim0 in range(256) ]
        self.num_point = 0
        self.map_speed = 0
        self.steer = 0

    def encode(self):
        buf = BytesIO()
        buf.write(structAIMPATHINT._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qB", self.timestamp, self.mode))
        buf.write(struct.pack('>256d', *self.x[:256]))
        buf.write(struct.pack('>256d', *self.y[:256]))
        buf.write(struct.pack(">iii", self.num_point, self.map_speed, self.steer))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != structAIMPATHINT._get_packed_fingerprint():
            raise ValueError("Decode error")
        return structAIMPATHINT._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = structAIMPATHINT()
        self.timestamp, self.mode = struct.unpack(">qB", buf.read(9))
        self.x = struct.unpack('>256d', buf.read(2048))
        self.y = struct.unpack('>256d', buf.read(2048))
        self.num_point, self.map_speed, self.steer = struct.unpack(">iii", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if structAIMPATHINT in parents: return 0
        tmphash = (0x1491012fcf044a8c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if structAIMPATHINT._packed_fingerprint is None:
            structAIMPATHINT._packed_fingerprint = struct.pack(">Q", structAIMPATHINT._get_hash_recursive([]))
        return structAIMPATHINT._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

