"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class structNAVINFO(object):
    __slots__ = ["timestamp", "mLat", "mLon", "mAlt", "utmX", "utmY", "mHeading", "mPitch", "mAngularRateZ", "mSpeed3d", "mVe", "mVn", "mCurvature", "mRTKStatus", "mHPOSAccuracy", "isReckoningVaild", "mGpsNumObs", "mAx", "mAy"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "float", "float", "float", "float", "float", "float", "byte", "float", "byte", "int64_t", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.mLat = 0.0
        self.mLon = 0.0
        self.mAlt = 0.0
        self.utmX = 0.0
        self.utmY = 0.0
        self.mHeading = 0.0
        self.mPitch = 0.0
        self.mAngularRateZ = 0.0
        self.mSpeed3d = 0.0
        self.mVe = 0.0
        self.mVn = 0.0
        self.mCurvature = 0.0
        self.mRTKStatus = 0
        self.mHPOSAccuracy = 0.0
        self.isReckoningVaild = 0
        self.mGpsNumObs = 0
        self.mAx = 0.0
        self.mAy = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(structNAVINFO._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddddffffffBfBqdd", self.timestamp, self.mLat, self.mLon, self.mAlt, self.utmX, self.utmY, self.mHeading, self.mPitch, self.mAngularRateZ, self.mSpeed3d, self.mVe, self.mVn, self.mCurvature, self.mRTKStatus, self.mHPOSAccuracy, self.isReckoningVaild, self.mGpsNumObs, self.mAx, self.mAy))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != structNAVINFO._get_packed_fingerprint():
            raise ValueError("Decode error")
        return structNAVINFO._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = structNAVINFO()
        self.timestamp, self.mLat, self.mLon, self.mAlt, self.utmX, self.utmY, self.mHeading, self.mPitch, self.mAngularRateZ, self.mSpeed3d, self.mVe, self.mVn, self.mCurvature, self.mRTKStatus, self.mHPOSAccuracy, self.isReckoningVaild, self.mGpsNumObs, self.mAx, self.mAy = struct.unpack(">qddddddffffffBfBqdd", buf.read(110))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if structNAVINFO in parents: return 0
        tmphash = (0xc2504c32a06036ad) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if structNAVINFO._packed_fingerprint is None:
            structNAVINFO._packed_fingerprint = struct.pack(">Q", structNAVINFO._get_hash_recursive([]))
        return structNAVINFO._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

