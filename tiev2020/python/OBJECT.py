"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from POSITION import POSITION

from BOUNDINGBOX import BOUNDINGBOX

class OBJECT(object):
    __slots__ = ["id", "obj_type", "v", "theta", "width", "length", "corners", "pathNum", "path"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.id = 0
        self.obj_type = 0
        self.v = 0.0
        self.theta = 0.0
        self.width = 0.0
        self.length = 0.0
        self.corners = BOUNDINGBOX()
        self.pathNum = 0
        self.path = []

    def encode(self):
        buf = BytesIO()
        buf.write(OBJECT._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hBffff", self.id, self.obj_type, self.v, self.theta, self.width, self.length))
        assert self.corners._get_packed_fingerprint() == BOUNDINGBOX._get_packed_fingerprint()
        self.corners._encode_one(buf)
        buf.write(struct.pack(">b", self.pathNum))
        for i0 in range(self.pathNum):
            assert self.path[i0]._get_packed_fingerprint() == POSITION._get_packed_fingerprint()
            self.path[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != OBJECT._get_packed_fingerprint():
            raise ValueError("Decode error")
        return OBJECT._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = OBJECT()
        self.id, self.obj_type, self.v, self.theta, self.width, self.length = struct.unpack(">hBffff", buf.read(19))
        self.corners = BOUNDINGBOX._decode_one(buf)
        self.pathNum = struct.unpack(">b", buf.read(1))[0]
        self.path = []
        for i0 in range(self.pathNum):
            self.path.append(POSITION._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if OBJECT in parents: return 0
        newparents = parents + [OBJECT]
        tmphash = (0xa6a3e30c8bc83649+ BOUNDINGBOX._get_hash_recursive(newparents)+ POSITION._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if OBJECT._packed_fingerprint is None:
            OBJECT._packed_fingerprint = struct.pack(">Q", OBJECT._get_hash_recursive([]))
        return OBJECT._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

