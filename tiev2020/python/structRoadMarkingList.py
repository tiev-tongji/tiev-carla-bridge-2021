"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from StopLine import StopLine

from Lane import Lane

class structRoadMarkingList(object):
    __slots__ = ["current_lane_id", "num", "lanes", "stop_line", "boundary_detected"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.current_lane_id = 0
        self.num = 0
        self.lanes = []
        self.stop_line = StopLine()
        self.boundary_detected = False

    def encode(self):
        buf = BytesIO()
        buf.write(structRoadMarkingList._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.current_lane_id, self.num))
        for i0 in range(self.num):
            assert self.lanes[i0]._get_packed_fingerprint() == Lane._get_packed_fingerprint()
            self.lanes[i0]._encode_one(buf)
        assert self.stop_line._get_packed_fingerprint() == StopLine._get_packed_fingerprint()
        self.stop_line._encode_one(buf)
        buf.write(struct.pack(">b", self.boundary_detected))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != structRoadMarkingList._get_packed_fingerprint():
            raise ValueError("Decode error")
        return structRoadMarkingList._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = structRoadMarkingList()
        self.current_lane_id, self.num = struct.unpack(">ii", buf.read(8))
        self.lanes = []
        for i0 in range(self.num):
            self.lanes.append(Lane._decode_one(buf))
        self.stop_line = StopLine._decode_one(buf)
        self.boundary_detected = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if structRoadMarkingList in parents: return 0
        newparents = parents + [structRoadMarkingList]
        tmphash = (0x84a9682c6842c407+ Lane._get_hash_recursive(newparents)+ StopLine._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if structRoadMarkingList._packed_fingerprint is None:
            structRoadMarkingList._packed_fingerprint = struct.pack(">Q", structRoadMarkingList._get_hash_recursive([]))
        return structRoadMarkingList._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

