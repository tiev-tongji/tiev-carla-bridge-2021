"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from namedBoolArray import namedBoolArray

from namedIntArray import namedIntArray

from namedDoubleArray import namedDoubleArray

from namedMapArray import namedMapArray

from namedFloatArray import namedFloatArray

class structVISUALINFO(object):
    __slots__ = ["timestamp", "doubleArraySize", "doubleArray", "floatArraySize", "floatArray", "intArraySize", "intArray", "boolArraySize", "boolArray", "mapArraySize", "mapArray"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.timestamp = 0
        self.doubleArraySize = 0
        self.doubleArray = []
        self.floatArraySize = 0
        self.floatArray = []
        self.intArraySize = 0
        self.intArray = []
        self.boolArraySize = 0
        self.boolArray = []
        self.mapArraySize = 0
        self.mapArray = []

    def encode(self):
        buf = BytesIO()
        buf.write(structVISUALINFO._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qh", self.timestamp, self.doubleArraySize))
        for i0 in range(self.doubleArraySize):
            assert self.doubleArray[i0]._get_packed_fingerprint() == namedDoubleArray._get_packed_fingerprint()
            self.doubleArray[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.floatArraySize))
        for i0 in range(self.floatArraySize):
            assert self.floatArray[i0]._get_packed_fingerprint() == namedFloatArray._get_packed_fingerprint()
            self.floatArray[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.intArraySize))
        for i0 in range(self.intArraySize):
            assert self.intArray[i0]._get_packed_fingerprint() == namedIntArray._get_packed_fingerprint()
            self.intArray[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.boolArraySize))
        for i0 in range(self.boolArraySize):
            assert self.boolArray[i0]._get_packed_fingerprint() == namedBoolArray._get_packed_fingerprint()
            self.boolArray[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.mapArraySize))
        for i0 in range(self.mapArraySize):
            assert self.mapArray[i0]._get_packed_fingerprint() == namedMapArray._get_packed_fingerprint()
            self.mapArray[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != structVISUALINFO._get_packed_fingerprint():
            raise ValueError("Decode error")
        return structVISUALINFO._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = structVISUALINFO()
        self.timestamp, self.doubleArraySize = struct.unpack(">qh", buf.read(10))
        self.doubleArray = []
        for i0 in range(self.doubleArraySize):
            self.doubleArray.append(namedDoubleArray._decode_one(buf))
        self.floatArraySize = struct.unpack(">h", buf.read(2))[0]
        self.floatArray = []
        for i0 in range(self.floatArraySize):
            self.floatArray.append(namedFloatArray._decode_one(buf))
        self.intArraySize = struct.unpack(">h", buf.read(2))[0]
        self.intArray = []
        for i0 in range(self.intArraySize):
            self.intArray.append(namedIntArray._decode_one(buf))
        self.boolArraySize = struct.unpack(">h", buf.read(2))[0]
        self.boolArray = []
        for i0 in range(self.boolArraySize):
            self.boolArray.append(namedBoolArray._decode_one(buf))
        self.mapArraySize = struct.unpack(">h", buf.read(2))[0]
        self.mapArray = []
        for i0 in range(self.mapArraySize):
            self.mapArray.append(namedMapArray._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if structVISUALINFO in parents: return 0
        newparents = parents + [structVISUALINFO]
        tmphash = (0xc306f6517fcd6306+ namedDoubleArray._get_hash_recursive(newparents)+ namedFloatArray._get_hash_recursive(newparents)+ namedIntArray._get_hash_recursive(newparents)+ namedBoolArray._get_hash_recursive(newparents)+ namedMapArray._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if structVISUALINFO._packed_fingerprint is None:
            structVISUALINFO._packed_fingerprint = struct.pack(">Q", structVISUALINFO._get_hash_recursive([]))
        return structVISUALINFO._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

